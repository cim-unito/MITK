
# Update the CMake module path
set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "@MITK_SOURCE_DIR@/CMake")

set(CppMicroServices_SOURCE_DIR @MITK_SOURCE_DIR@/Core/Code/CppMicroServices)

# Include MITK macros
include(MacroParseArguments)
include(@CppMicroServices_SOURCE_DIR@/CMake/usFunctionGenerateModuleInit.cmake)
include(mitkFunctionCheckMitkCompatibility)
include(mitkFunctionOrganizeSources)
include(mitkFunctionCreateWindowsBatchScript)
include(mitkFunctionInstallProvisioningFiles)
include(mitkFunctionInstallAutoLoadModules)
include(mitkMacroCreateModuleConf)
include(mitkMacroCreateModule)
include(mitkMacroCheckModule)
include(mitkMacroCreateModuleTests)
include(mitkFunctionAddCustomModuleTest)
include(mitkMacroUseModule)
include(mitkMacroMultiplexPicType)
include(mitkMacroInstall)
include(mitkMacroInstallHelperApp)
include(mitkMacroInstallTargets)
include(mitkMacroGenerateToolsLibrary)
include(mitkMacroCreateCTKPlugin)

# The MITK version number
set(MITK_VERSION_MAJOR "@MITK_VERSION_MAJOR@")
set(MITK_VERSION_MINOR "@MITK_VERSION_MINOR@")
set(MITK_VERSION_PATCH "@MITK_VERSION_PATCH@")
set(MITK_VERSION_STRING "@MITK_VERSION_STRING@")

# Internal version numbers, used for approximate compatibility checks
# of a MITK development version (non-release).
set(MITK_VERSION_PLUGIN_SYSTEM 2) # dropped legacy BlueBerry plug-in CMake support

# MITK specific variables
set(MITK_SOURCE_DIR "@MITK_SOURCE_DIR@")
set(MITK_BINARY_DIR "@MITK_BINARY_DIR@")
set(UTILITIES_DIR "@UTILITIES_DIR@")
set(REGISTER_QFUNCTIONALITY_CPP_IN "@REGISTER_QFUNCTIONALITY_CPP_IN@")
set(MITK_MODULES_PACKAGE_DEPENDS_DIR "@MITK_MODULES_PACKAGE_DEPENDS_DIR@")
set(MODULES_PACKAGE_DEPENDS_DIRS "@MODULES_PACKAGE_DEPENDS_DIRS@")
set(MITK_DOXYGEN_TAGFILE_NAME "@MITK_DOXYGEN_TAGFILE_NAME@")
if(MODULES_CONF_DIRS)
  list(APPEND MODULES_CONF_DIRS "@MODULES_CONF_DIRS@")
  list(REMOVE_DUPLICATES MODULES_CONF_DIRS)
else() 
  set(MODULES_CONF_DIRS "@MODULES_CONF_DIRS@")
endif()

set(MODULES_CONF_DIRNAME "@MODULES_CONF_DIRNAME@")

foreach(_module @MITK_MODULE_NAMES@)
  set(${_module}_CONFIG_FILE "@MITK_BINARY_DIR@/@MODULES_CONF_DIRNAME@/${_module}Config.cmake")
endforeach()

# Include directory variables
set(MITK_INCLUDE_DIRS "@MITK_INCLUDE_DIRS@")
set(QMITK_INCLUDE_DIRS "@QMITK_INCLUDE_DIRS@")
set(ANN_INCLUDE_DIR "@ANN_INCLUDE_DIR@")
set(IPSEGMENTATION_INCLUDE_DIR "@IPSEGMENTATION_INCLUDE_DIR@")
set(VECMATH_INCLUDE_DIR "@VECMATH_INCLUDE_DIR@")
set(IPFUNC_INCLUDE_DIR "@IPFUNC_INCLUDE_DIR@")
set(MITK_IGT_INCLUDE_DIRS "@MITK_IGT_INCLUDE_DIRS@")

# Library variables
set(MITK_LIBRARIES "@MITK_LIBRARIES@")
set(QMITK_LIBRARIES "@QMITK_LIBRARIES@")

# Link directory variables
set(MITK_LINK_DIRECTORIES "@MITK_LINK_DIRECTORIES@")
set(QMITK_LINK_DIRECTORIES "@QMITK_LINK_DIRECTORIES@")
set(MITK_LIBRARY_DIRS "@CMAKE_LIBRARY_OUTPUT_DIRECTORY@" "@CMAKE_LIBRARY_OUTPUT_DIRECTORY@/plugins")
set(MITK_VTK_LIBRARY_DIRS "@MITK_VTK_LIBRARY_DIRS@")
set(MITK_ITK_LIBRARY_DIRS "@MITK_ITK_LIBRARY_DIRS@")

# External projects
set(ITK_DIR "@ITK_DIR@")
set(VTK_DIR "@VTK_DIR@")
set(DCMTK_DIR "@DCMTK_DIR@")
set(GDCM_DIR "@GDCM_DIR@")
set(BOOST_ROOT "@BOOST_ROOT@")
set(OpenCV_DIR "@OpenCV_DIR@")
set(MITK_QMAKE_EXECUTABLE "@QT_QMAKE_EXECUTABLE@")
set(MITK_DATA_DIR "@MITK_DATA_DIR@")
set(MITK_RUNTIME_PATH "@MITK_RUNTIME_PATH@")

# MITK use variables
set(MITK_USE_QT @MITK_USE_QT@)
set(MITK_USE_BLUEBERRY @MITK_USE_BLUEBERRY@)
set(MITK_USE_SYSTEM_Boost @MITK_USE_SYSTEM_Boost@)
set(MITK_USE_Boost @MITK_USE_Boost@)
set(MITK_USE_Boost_LIBRARIES @MITK_USE_Boost_LIBRARIES@)
set(MITK_USE_CTK @MITK_USE_CTK@)
set(MITK_USE_DCMTK @MITK_USE_DCMTK@)
set(MITK_USE_OpenCV @MITK_USE_OpenCV@)
set(MITK_USE_Python @MITK_USE_Python@)

# There is no PocoConfig.cmake, so we set Poco specific CMake variables
# here. This way the call to find_package(Poco) in BlueBerryConfig.cmake
# finds the Poco distribution supplied by MITK
set(Poco_INCLUDE_DIR "@MITK_SOURCE_DIR@/Utilities/Poco")
set(Poco_LIBRARY_DIR "@MITK_BINARY_DIR@/bin")

if(MITK_USE_IGT)
  #include(${MITK_DIR}/mitkIGTConfig.cmake)
endif()

if(NOT MITK_EXPORTS_FILE_INCLUDED)
  if(EXISTS "@MITK_EXPORTS_FILE@")
    set(MITK_EXPORTS_FILE_INCLUDED 1)
    include("@MITK_EXPORTS_FILE@")
  endif(EXISTS "@MITK_EXPORTS_FILE@")
endif()

# BlueBerry support
if(MITK_USE_BLUEBERRY)

  set(BlueBerry_DIR "@MITK_BINARY_DIR@/BlueBerry")
  
  # Don't include the BlueBerry exports file, since the targets are
  # also exported in the MITK exports file
  set(BB_PLUGIN_EXPORTS_FILE_INCLUDED 1)
  find_package(BlueBerry)

  if(NOT BlueBerry_FOUND)
    message(SEND_ERROR "MITK does not seem to be configured with BlueBerry support. Set MITK_USE_BLUEBERRY to ON in your MITK build configuration.")
  endif(NOT BlueBerry_FOUND)

  set(MITK_PLUGIN_USE_FILE @MITK_PLUGIN_USE_FILE@)
  if(MITK_PLUGIN_USE_FILE)
    if(EXISTS ${MITK_PLUGIN_USE_FILE})
      include(${MITK_PLUGIN_USE_FILE})
    endif()
  endif()

  set(MITK_PLUGIN_PROVISIONING_FILE "@MITK_EXTAPP_PROVISIONING_FILE@")
  set(MITK_PROVISIONING_FILES
      "${BLUEBERRY_PLUGIN_PROVISIONING_FILE}"
      "${MITK_PLUGIN_PROVISIONING_FILE}")

endif(MITK_USE_BLUEBERRY)

# Set properties on exported targets
@MITK_EXPORTED_TARGET_PROPERTIES@

